using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Plugins;

namespace SetValueFromTemplate
{
    public class TestSettings
    {
        public bool IgnoreStaves = true;
        public List<FormLink<IArmorGetter>> ArmorBlacklist = new();
        public List<FormLink<IWeaponGetter>> WeaponBlacklist = new();
        public List<string> EditorIDWhitelist = new()
        {
            "Ench"
        };
        public List<string> EditorIDBlacklist = new()
        {
            "Necklace",
            "Ring",
            "Circlet",
            "Robes"
        };
    }

    public class Program
    {
        static Lazy<TestSettings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!

            foreach (var weaponGetter in state.LoadOrder.PriorityOrder.Weapon().WinningOverrides())
            {
                if (weaponGetter.Template.IsNull) continue;
                var template = weaponGetter.Template.Resolve(state.LinkCache);
                var weapon = weaponGetter.DeepCopy();

                if (weapon.BasicStats == null || template.BasicStats == null || template.Data == null || weapon.BasicStats.Value == template.BasicStats.Value || weapon.EditorID == null) continue;
                if (Settings.Value.IgnoreStaves)
                {
                    if (template.Data.AnimationType == WeaponAnimationType.Staff) continue;
                }
                if (Settings.Value.WeaponBlacklist.Contains(weapon.ToLink<IWeaponGetter>())) continue;

                if (Settings.Value.EditorIDBlacklist.Any(value => weapon.EditorID.Contains(value))) continue;
                if (!Settings.Value.EditorIDWhitelist.Any(value => weapon.EditorID.Contains(value))) continue;

                Console.WriteLine(weapon.EditorID);
                weapon.BasicStats.Value = template.BasicStats.Value;
                state.PatchMod.Weapons.Set(weapon);
            }

            foreach (var armorGetter in state.LoadOrder.PriorityOrder.Armor().WinningOverrides())
            {
                if (armorGetter.TemplateArmor.IsNull) continue;
                var template = armorGetter.TemplateArmor.Resolve(state.LinkCache);
                var armor = armorGetter.DeepCopy();

                if (armor.Value == template.Value || armor.EditorID == null) continue;
                if (Settings.Value.ArmorBlacklist.Contains(armor.ToLink<IArmorGetter>())) continue;

                if (Settings.Value.EditorIDBlacklist.Any(value => armor.EditorID.Contains(value))) continue;
                if (!Settings.Value.EditorIDWhitelist.Any(value => armor.EditorID.Contains(value))) continue;

                Console.WriteLine(armor.EditorID);
                armor.Value = template.Value;
                state.PatchMod.Armors.Set(armor);
            }
        }
    }
}
